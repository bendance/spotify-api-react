{"version":3,"sources":["MyForm.js","authentication.js","Success.js","App.js","reportWebVitals.js","index.js"],"names":["MyForm","props","handleChangePlaylistName","event","setState","playlistName","target","value","console","log","state","handleChangePlaylistPublic","playlistPublic","handleChangePlaylistDescription","playlistDescription","handleChangeUserFavoriteGenre","userFavoriteGenre","handleSubmit","a","failedSubmit","preventDefault","playlistLoading","fetch","method","body","JSON","stringify","headers","response","handleSetCreatingPlaylist","text","playlist","handleSetPlaylistUrl","callCreate","bind","onSubmit","this","className","htmlFor","id","type","onChange","name","checked","rows","color","React","Component","Authentication","authenticateUser","data","url","window","location","href","componentDidMount","URL","codeText","searchParams","get","code","token","handleSetTokenActive","onClick","Success","style","width","margin","open","App","useState","tokenActive","setTokenActive","creatingPlaylist","setCreatingPlaylist","playlistUrl","setPlaylistUrl","truthValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAGMA,E,kDAEF,WAAYC,GACX,IAAD,8BACI,cAAMA,IAgBVC,yBAA2B,SAACC,GAExB,EAAKC,SAAS,CAAEC,aAAcF,EAAMG,OAAOC,QAC3CC,QAAQC,IAAI,EAAKC,MAAML,eApB3B,EAuBAM,2BAA6B,SAACR,GAE1B,EAAKC,SAAS,CAAEQ,eAAgBT,EAAMG,OAAOC,QAC7CC,QAAQC,IAAI,EAAKC,MAAME,iBA1B3B,EA6BAC,gCAAkC,SAACV,GAE/B,EAAKC,SAAS,CAAEU,oBAAqBX,EAAMG,OAAOC,QAClDC,QAAQC,IAAI,EAAKC,MAAMI,sBAhC3B,EAmCAC,8BAAgC,SAACZ,GAE7B,EAAKC,SAAS,CAAEY,kBAAmBb,EAAMG,OAAOC,QAChDC,QAAQC,IAAI,EAAKC,MAAMM,oBAtC3B,EAyCAC,aAzCA,uCAyCe,WAAOd,GAAP,iBAAAe,EAAA,yDAGqB,KAA5B,EAAKR,MAAML,aAHJ,gBAKP,EAAKD,SAAS,CAAEe,cAAc,IAC9BhB,EAAMiB,iBANC,8BAWPZ,QAAQC,IAAI,sBACZ,EAAKL,SAAS,CAAEiB,iBAAiB,IAEjClB,EAAMiB,iBAdC,UAgBgBE,MAAM,wCAAyC,CAClEC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,EAAKhB,OAC1BiB,QAAS,CACL,eAAgB,sBApBjB,cAwBiB,qBARlBC,EAhBC,SAyBHpB,QAAQC,IAAI,2BACZ,EAAKR,MAAM4B,2BAA0B,GA1BlC,UA4BoBD,EAASE,OA5B7B,QA4BGC,EA5BH,OA6BHvB,QAAQC,WAAWsB,GAEnB,EAAK9B,MAAM+B,qBAAqBD,GA/B7B,4CAzCf,wDA4EAE,WAAa,SAAC9B,GAEV,OADA,EAAKc,aAAad,IACX,GA5EP,EAAKO,MAAQ,CACTL,aAAc,GACdO,eAAgB,KAChBE,oBAAqB,GACrBE,kBAAmB,MACnBG,aAAc,GACdE,iBAAiB,GAErB,EAAKnB,yBAA2B,EAAKA,yBAAyBgC,KAA9B,gBAChC,EAAKvB,2BAA6B,EAAKA,2BAA2BuB,KAAhC,gBAClC,EAAKrB,gCAAkC,EAAKA,gCAAgCqB,KAArC,gBACvC,EAAKnB,8BAAgC,EAAKA,8BAA8BmB,KAAnC,gBACrC,EAAKjB,aAAe,EAAKA,aAAaiB,KAAlB,gBAdxB,E,0CAiFA,WAEI,OACI,8BACI,uBAAMC,SAAUC,KAAKH,WAArB,UACI,sBAAKI,UAAU,aAAf,UACKD,KAAK1B,MAAMS,aACR,uBAAOkB,UAAU,cAAcC,QAAU,eAAzC,8BACA,uBAAOA,QAAU,eAAjB,8BACJ,uBACA,uBAAOC,GAAK,eAAeF,UAAU,eAAeG,KAAO,OAAOjC,MAAS6B,KAAK1B,MAAML,aAAcoC,SAAUL,KAAKlC,8BAEtHkC,KAAK1B,MAAMS,aACR,qBAAKkB,UAAU,cAAf,iDACA,KACJ,uBACA,sBAAKA,UAAU,aAAf,UACI,uBAAOC,QAAU,gBAAjB,+BACA,uBACA,yBAAQC,GAAK,gBAAgBF,UAAY,eAAeI,SAAUL,KAAKrB,8BAAvE,UACI,wBAAQR,MAAQ,MAAhB,iBACA,wBAAQA,MAAQ,UAAhB,2BACA,wBAAQA,MAAQ,OAAhB,kBACA,wBAAQA,MAAQ,aAAhB,wBACA,wBAAQA,MAAQ,QAAhB,mBACA,wBAAQA,MAAQ,aAAhB,wBACA,wBAAQA,MAAQ,YAAhB,uBACA,wBAAQA,MAAQ,QAAhB,mBACA,wBAAQA,MAAQ,aAAhB,wBACA,wBAAQA,MAAQ,UAAhB,2BAGR,uBACA,sBAAK8B,UAAU,aAAf,2DAEI,uBACA,sBAAKA,UAAU,aAAf,UACI,uBAAOA,UAAU,mBAAmBG,KAAO,QAAQD,GAAK,MAAMhC,MAAQ,MAAMmC,KAAO,SAASD,SAAUL,KAAKzB,2BAA4BgC,QAAyC,QAA9BP,KAAK1B,MAAME,iBAC7J,uBAAOyB,UAAU,mBAAmBC,QAAU,MAA9C,oBAEJ,sBAAKD,UAAU,aAAf,UACI,uBAAOA,UAAU,mBAAmBG,KAAO,QAAQD,GAAK,KAAKhC,MAAQ,KAAKmC,KAAM,SAASD,SAAUL,KAAKzB,2BAA4BgC,QAAyC,OAA9BP,KAAK1B,MAAME,iBAC1J,uBAAOyB,UAAU,mBAAmBC,QAAU,KAA9C,uBAGR,uBACA,sBAAKD,UAAU,aAAf,UACI,uBAAOC,QAAU,sBAAjB,mCACA,uBACA,0BAAUD,UAAU,eAAeO,KAAO,IAAIL,GAAK,sBAAsBhC,MAAS6B,KAAK1B,MAAMI,oBAAqB2B,SAAUL,KAAKvB,qCAErI,uBACA,qBAAKwB,UAAU,cAAf,SACQD,KAAK1B,MAAMW,gBAEXe,KAAK1B,MAAMW,gBACX,cAAC,IAAD,CAAQmB,KAAK,YAAYK,MAAM,YAC/B,KAHA,wBAAQR,UAAU,kBAAlB,+BAKR,gC,GA/ICS,IAAMC,WAsJZ/C,ICvJTgD,E,4MAEFC,iB,sBAAmB,8BAAA/B,EAAA,sEAEII,MAAM,+BAFV,cAET4B,EAFS,gBAIGA,EAAKpB,OAJR,OAITqB,EAJS,OAMfC,OAAOC,SAASC,KAAOH,EANR,2C,EASnBI,kB,sBAAoB,kCAAArC,EAAA,yDAEZiC,EAAM,IAAIK,IAAIJ,OAAOC,SAASC,QAC9BG,EAAWN,EAAIO,aAAaC,IAAI,SAHpB,iCAOOrC,MAAM,iCAAkC,CACvDC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACkC,KAAMH,IAC5B9B,QAAS,CACL,eAAgB,sBAXZ,cAONuB,EAPM,gBAgBQA,EAAKpB,OAhBb,OAiBC,UADP+B,EAhBM,SAkBR,EAAK5D,MAAM6D,uBACftD,QAAQC,IAAI,8BAA+BoD,GAnB/B,4C,4CAuBpB,WACI,OACI,qBAAKxB,UAAU,cAAf,SACI,wBAAQG,KAAK,SAASH,UAAU,kBAAkB0B,QAAS3B,KAAKa,iBAAhE,gC,GArCaH,IAAMC,WA0CpBC,ICbAgB,G,YA7BC,SAAC/D,GAab,OACI,sBAAKoC,UAAU,cAAf,UACI,oBAAIA,UAAU,cAAd,0DACA,uBACA,sBAAKA,UAAU,MAAM4B,MAAO,CAACC,MAAO,QAASC,OAAQ,QAArD,UACI,qBAAK9B,UAAU,MAAf,SACQ,wBAAQG,KAAO,SAASH,UAAY,kBAAkB0B,QAjBrD,WACjBX,OAAOgB,KAAP,UACOnE,EAAMkD,KACT,WAcyFc,MAAS,CAACE,OAAQ,QAA/F,8BAER,qBAAK9B,UAAU,MAAf,SACI,wBAAQG,KAAO,SAASH,UAAY,kBAAkB0B,QAbjD,WACjB9D,EAAM4B,2BAA0B,IAYpB,sCCqBLwC,MAtCf,SAAapE,GAEX,MAAsCqE,mBAAS,SAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAgDF,oBAAS,GAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KACA,EAAsCJ,mBAAS,IAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAMM/C,EAA4B,SAACgD,GACjCH,EAAoBG,IAOtB,OACI,qBAAKxC,UAAU,MAAf,SACE,sBAAKA,UAAU,UAAf,WAC0B,IAArBoC,EAA4B,CAC3B,4DACA,wBACE,KACc,SAAhBF,IAA+C,IAArBE,EAC1B,cAAC,EAAD,CAAQ5C,0BAA6BA,EAA2BG,qBAZ/C,SAACmB,GAC5ByB,EAAezB,MAYc,UAAhBoB,IAAgD,IAArBE,EAC9B,cAAC,EAAD,CAAgBX,qBAtBC,WAC3BU,EAAe,YAsBmB,IAArBC,GACHjE,QAAQC,IAAIkE,GACZ,cAAC,EAAD,CAASxB,IAAOwB,EAAa9C,0BAA6BA,KACxD,WC3BDiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.354f4de4.chunk.js","sourcesContent":["import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nclass MyForm extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = { \r\n            playlistName: '',\r\n            playlistPublic: 'no',\r\n            playlistDescription: '',\r\n            userFavoriteGenre: 'Pop',\r\n            failedSubmit: '',\r\n            playlistLoading: false};\r\n\r\n        this.handleChangePlaylistName = this.handleChangePlaylistName.bind(this);\r\n        this.handleChangePlaylistPublic = this.handleChangePlaylistPublic.bind(this);\r\n        this.handleChangePlaylistDescription = this.handleChangePlaylistDescription.bind(this);\r\n        this.handleChangeUserFavoriteGenre = this.handleChangeUserFavoriteGenre.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChangePlaylistName = (event) => \r\n    {\r\n        this.setState({ playlistName: event.target.value });\r\n        console.log(this.state.playlistName);\r\n    }\r\n\r\n    handleChangePlaylistPublic = (event) =>\r\n    {\r\n        this.setState({ playlistPublic: event.target.value });\r\n        console.log(this.state.playlistPublic);\r\n    }\r\n\r\n    handleChangePlaylistDescription = (event) =>\r\n    {\r\n        this.setState({ playlistDescription: event.target.value });\r\n        console.log(this.state.playlistDescription);\r\n    }\r\n\r\n    handleChangeUserFavoriteGenre = (event) => \r\n    {\r\n        this.setState({ userFavoriteGenre: event.target.value });\r\n        console.log(this.state.userFavoriteGenre);\r\n    }\r\n\r\n    handleSubmit = async (event) =>\r\n    {\r\n        // if the required fields aren't completed, add text saying to complete fields\r\n        if (this.state.playlistName === '')\r\n        {\r\n            this.setState({ failedSubmit: true });\r\n            event.preventDefault();\r\n        }\r\n        else\r\n        {\r\n            // replace create playlist button with loading icon\r\n            console.log(\"Creating playlist.\")\r\n            this.setState({ playlistLoading: true });\r\n\r\n            event.preventDefault();\r\n\r\n            const response = await fetch('http://localhost:8080/create-playlist', {\r\n                method: 'POST',\r\n                body: JSON.stringify(this.state),\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n            })\r\n\r\n            if (typeof response !== \"undefined\")\r\n                console.log(\"Sending success screen.\")\r\n                this.props.handleSetCreatingPlaylist(false);\r\n\r\n                const playlist = await response.text();\r\n                console.log(typeof playlist);\r\n\r\n                this.props.handleSetPlaylistUrl(playlist);\r\n        }\r\n    }\r\n\r\n    callCreate = (event) => {\r\n        this.handleSubmit(event);\r\n        return false;\r\n    }\r\n\r\n    render() \r\n    {\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.callCreate}>\r\n                    <div className='form-group'>\r\n                        {this.state.failedSubmit ? (\r\n                            <label className='text-danger' htmlFor = \"playlistName\">* Playlist Name:</label>\r\n                        ) : <label htmlFor = \"playlistName\">* Playlist Name:</label>}\r\n                        <br></br>\r\n                        <input id = \"playlistName\" className='form-control' type = \"text\" value = {this.state.playlistName} onChange={this.handleChangePlaylistName} />\r\n                    </div>\r\n                    {this.state.failedSubmit ? ( \r\n                        <div className='text-danger'>Please fill out the required field.</div>\r\n                    ) : null}\r\n                    <br></br>\r\n                    <div className='form-group'>\r\n                        <label htmlFor = \"favoriteGenre\">* Favorite Genre:</label>\r\n                        <br></br>\r\n                        <select id = \"favoriteGenre\" className = \"form-control\" onChange={this.handleChangeUserFavoriteGenre}>\r\n                            <option value = \"Pop\">Pop</option>\r\n                            <option value = \"Hip Hop\">Rap & Hip Hop</option>\r\n                            <option value = \"Rock\">Rock</option>\r\n                            <option value = \"Electronic\">Electronic</option>\r\n                            <option value = \"Latin\">Latin</option>\r\n                            <option value = \"Indie Rock\">Indie Rock</option>\r\n                            <option value = \"Reggaeton\">Reggaeton</option>\r\n                            <option value = \"K-Pop\">K-Pop</option>\r\n                            <option value = \"R&B / Soul\">R&B / Soul</option>\r\n                            <option value = \"Country\">Country</option>\r\n                        </select>\r\n                    </div>\r\n                    <br></br>\r\n                    <div className='form-group'>\r\n                        * Would you like to make your playlist public?\r\n                        <br></br>\r\n                        <div className='form-check'>\r\n                            <input className='form-check-input' type = \"radio\" id = \"yes\" value = \"yes\" name = \"public\" onChange={this.handleChangePlaylistPublic} checked = {this.state.playlistPublic === \"yes\"}/>\r\n                            <label className='form-check-label' htmlFor = \"yes\">Yes</label>\r\n                        </div>\r\n                        <div className='form-check'>\r\n                            <input className='form-check-input' type = \"radio\" id = \"no\" value = \"no\" name= \"public\" onChange={this.handleChangePlaylistPublic} checked = {this.state.playlistPublic === \"no\"}/>\r\n                            <label className='form-check-label' htmlFor = \"no\">No </label>\r\n                        </div>\r\n                    </div>\r\n                    <br></br>\r\n                    <div className='form-group'>\r\n                        <label htmlFor = \"playlistDescription\">Playlist Description:</label>\r\n                        <br></br>\r\n                        <textarea className='form-control' rows = \"3\" id = \"playlistDescription\" value = {this.state.playlistDescription} onChange={this.handleChangePlaylistDescription} />\r\n                    </div>\r\n                    <br></br>\r\n                    <div className='text-center'>\r\n                        { !(this.state.playlistLoading) ? (\r\n                            <button className='btn btn-primary'>Create Playlist</button>\r\n                        ) : this.state.playlistLoading ? (\r\n                            <Loader type=\"ThreeDots\" color=\"#0d6efd\"/>\r\n                        ) : null}\r\n                    </div>\r\n                    <br></br>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyForm;","import React from \"react\";\r\n\r\nclass Authentication extends React.Component\r\n{\r\n    authenticateUser = async () =>\r\n    {\r\n        const data = await fetch(\"http://localhost:8080/login\");\r\n\r\n        const url = await data.text();\r\n        \r\n        window.location.href = url;\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        // parse the url code and send it to the backend to be sent API key\r\n        var url = new URL(window.location.href);\r\n        var codeText = url.searchParams.get('code');\r\n\r\n        if (codeText)\r\n        {\r\n            const data = await fetch(\"http://localhost:8080/callback\", {\r\n                method: 'POST',\r\n                body: JSON.stringify({code: codeText}),\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n            });\r\n            \r\n            // evaluate if a token was created\r\n            const token = await data.text();\r\n            if(token === 'true')\r\n                this.props.handleSetTokenActive();\r\n            console.log(\"Was Spotify Token Created?:\", token);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"text-center\">\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={this.authenticateUser}>Authenticate</button>\r\n            </div>\r\n    )}\r\n}\r\n\r\nexport default Authentication;","import React from \"react\";\r\n\r\nconst Success = (props) =>\r\n{\r\n    const openPlaylist = () => {\r\n        window.open(\r\n            `${props.url}`, \r\n            '_blank'\r\n        );\r\n    };\r\n\r\n    const goBackToForm = () => {\r\n        props.handleSetCreatingPlaylist(true);\r\n    }\r\n\r\n    return(\r\n        <div className=\"text-center\">\r\n            <h2 className=\"text-center\">Your playlist has been successfully created!</h2>\r\n            <br></br>\r\n            <div className=\"row\" style={{width: \"320px\", margin: \"auto\"}}>\r\n                <div className=\"col\">\r\n                        <button type = \"button\" className = \"btn btn-primary\" onClick={openPlaylist} style = {{margin: \"auto\"}}>Go To Playlist</button>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <button type = \"button\" className = \"btn btn-primary\" onClick={goBackToForm}>Create Another</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Success;","import MyForm from './MyForm'\nimport Authentication from './authentication'\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport React, { useState } from 'react';\nimport Success from './Success';\n\nfunction App(props)\n{\n  const [tokenActive, setTokenActive] = useState(\"false\");\n  const [creatingPlaylist, setCreatingPlaylist] = useState(true);\n  const [playlistUrl, setPlaylistUrl] = useState('');\n\n  const handleSetTokenActive = () => {\n    setTokenActive(\"true\");\n  } \n\n  const handleSetCreatingPlaylist = (truthValue) => {\n    setCreatingPlaylist(truthValue);\n  }\n\n  const handleSetPlaylistUrl = (url) => {\n    setPlaylistUrl(url);\n  }\n\n  return(\n      <div className=\"app\">\n        <div className='content'>\n            {creatingPlaylist === true ? [\n              <h1>Spotify Playlist Generator</h1>,\n              <br></br>\n            ] : null}\n            {(tokenActive === \"true\" && creatingPlaylist === true)? (\n              <MyForm handleSetCreatingPlaylist = {handleSetCreatingPlaylist} handleSetPlaylistUrl = {handleSetPlaylistUrl}/>\n            ) : (tokenActive === \"false\" && creatingPlaylist === true) ? (\n              <Authentication handleSetTokenActive = {handleSetTokenActive}/>\n            ) : (creatingPlaylist === false) ? (\n              console.log(playlistUrl),\n              <Success url = {playlistUrl} handleSetCreatingPlaylist = {handleSetCreatingPlaylist}/>\n            ) : null}\n        </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}